public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int n = A.size();
        List<List<Integer>> list = new ArrayList<> ();
        
        for(int i = 0; i < n; i++) {
            if(A.get(i) == 1) {
                List<Integer> temp = new ArrayList();
                temp.add(Math.max(0, i - B + 1));
                temp.add(Math.min(i + B - 1, n - 1));
                list.add(temp);
            }
        }
        
        int size = list.size();
        
        if(size == 0 || list.get(0).get(0) != 0 || list.get(size - 1).get(1) != (n - 1)) 
            return -1;        
        
        int count = 0, currentCovered = -1;
        
        for(int i = 0; i < size - 1; i++) {
            if(list.get(i).get(0) == (currentCovered + 1)) {
                currentCovered = list.get(i).get(1);
                count++;
            }
            else if(list.get(i).get(0) > (currentCovered + 1)) {
                return -1;
            }
            else if(list.get(i).get(0) < (currentCovered + 1) && list.get(i + 1).get(0) > (currentCovered + 1) ) {
                currentCovered = list.get(i).get(1);
                count++;
            }
            
            if( list.get(i).get(0) == list.get(i + 1).get(0)) {
                currentCovered = list.get(i + 1).get(1);
            }
        }
        
        if( (currentCovered + 1) < list.get(size - 1).get(0))
            return -1;
        else if( currentCovered < list.get(size - 1).get(1)) 
            count++;
        
        return count; 
    }
}



/*
public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int n = A.size();
        int i = 0, count = 0;
        
        while(i < n) {
            int left = Math.max(0, i - B + 1);
            int right = Math.min(i + B - 1, n - 1);
            boolean bulbFound = false;
            
            while(right >= left && bulbFound == false) {
                if(A.get(right) == 1) 
                    bulbFound = true;
                else
                    right--;
            }
            
            if(bulbFound == false) 
                return -1;
            
            count++;
            i = right + B;
        }

        return count;
    }
}
*/

/*
public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int n = A.size();
        int i = n - 1, count = 0;
        
        while(i >= 0) {
            int left = Math.max(0, i - B + 1);
            int right = Math.min(i + B - 1, n - 1);
            boolean bulbFound = false;
            
            while(right >= left && bulbFound == false) {
                if(A.get(left) == 1) 
                    bulbFound = true;
                else
                    left++;
            }
            
            if(bulbFound == false) 
                return -1;
            
            count++;
            i = left - B;
        }
         
         
        return count;
    }
}
*/
