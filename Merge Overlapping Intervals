/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        
        Collections.sort(intervals, new Comparator<Interval> () {
            public int compare(Interval i1, Interval i2) {
                int diff = i1.start - i2.start;
                if(diff != 0) {
                    return diff;
                }
                return i1.end - i2.end;
            }
        });
        
        ArrayList<Interval> result = new ArrayList<> ();
        Interval temp = intervals.get(0);
        result.add(intervals.get(0));
        
        for(int i = 1; i < intervals.size(); i++) {
            if(intervals.get(i).start <= temp.end) {
                temp.end = Math.max(temp.end, intervals.get(i).end);
            }
            else {
                temp = intervals.get(i);
				result.add(temp);
            }
        }
        
        return result;
    }    
}
