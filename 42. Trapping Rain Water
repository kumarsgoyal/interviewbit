class Solution {
    public int trap(int[] height) {
        int[] left = new int[height.length];
        int[] right = new int[height.length];
        int water = 0;

        left[0] = height[0];
        for(int i = 1; i < height.length; i++)  
            left[i] = Math.max(left[i - 1], height[i]);  
        
        right[height.length - 1] = height[height.length - 1];
        for(int i = height.length - 2; i >= 0; i--) 
            right[i] = Math.max(right[i + 1], height[i]);

        for(int i = 1; i < height.length - 1; i++) 
            water += Math.min(left[i], right[i]) - height[i];

        return water;
    }
}


/*

class Solution {
    public int trap(int[] height) {
        Stack<Integer> stack = new Stack<> ();
        int water = 0;

        for(int i = 0; i < height.length; i++) {
            while(!stack.isEmpty() && height[stack.peek()] < height[i]) {
                int popedHeight = height[stack.pop()];

                if(stack.isEmpty()) 
                    break;
                
                int diff = i - stack.peek() - 1;

                int minHeight = Math.min(height[stack.peek()], height[i]) - popedHeight;

                water += (diff * minHeight);
            }

            stack.push(i);
        }

        return water;
    }
}

*/
